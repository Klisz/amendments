plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "amendments.mixins.json"
        mixinConfig "amendments-common.mixins.json"

    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}


processResources {
    // input variables of this task:
    var replaceProperties = [
            minecraft_version         : minecraft_version,
            minecraft_min_version     : minecraft_min_version,
            minecraft_max_version     : minecraft_max_version,
            pack_format_number        : pack_format_number,

            mod_id                    : mod_id,
            mod_name                  : mod_name,
            mod_version               : mod_version,
            mod_license               : mod_license,
            mod_authors               : mod_authors,
            mod_description           : mod_description,
            mod_credits               : mod_credits,
            mod_homepage              : mod_homepage,
            mod_github                : mod_github,

            neo_version               : neo_version,
            neo_version_range         : neo_version_range,
            loader_version_range      : loader_version_range,
            required_moonlight_version: required_moonlight_version
    ]
    // setting them as input
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', 'update.json']) {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    // Built mods
    mavenCentral()
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    //forge "net.neoforged:forge:${neo_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))
    annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'

    modImplementation("net.mehvahdjukaar:moonlight-forge:${moonlight_version}")
	//modImplementation("curse.maven:selene-499980:5458914")
	
    //modCompileOnly("net.mehvahdjukaar:supplementaries-forge:${supplementaries_version}")
    modImplementation("curse.maven:supplementaries-412082:5458843")
	
    //modCompileOnly("net.mehvahdjukaar:suppsquared-forge:${suppsquared_version}")
	modCompileOnly("curse.maven:supplementaries-squared-838411:5130385")
	
   // modRuntimeOnly("einstein.jmc:JustMoreCakes:forge-1.20-1.12.1")
    modImplementation("curse.maven:lucent-493280:4951434")

    modImplementation("curse.maven:embeddium-908741:5681725")
    modImplementation("curse.maven:skinned-lanterns-414154:4656953")
    modCompileOnly("curse.maven:farmers-delight-398521:5051242")
   // modImplementation("curse.maven:polytone-958094:5308480")
    modCompileOnly("curse.maven:etched-491890:5065299")
    //modImplementation("curse.maven:aeroblender-879879:4789008")
    //modImplementation("curse.maven:terrablender-563928:5315142")
    //modImplementation("curse.maven:aether-255308:5296997")
    //modImplementation("curse.maven:aether-redux-867237:5339332")
    modImplementation("curse.maven:quark-243121:5594847")
    modImplementation("curse.maven:zeta-968868:5597406")
    modImplementation("curse.maven:blueprint-382216:6329107")
    modCompileOnly ("curse.maven:configured-457570:5101367")
    modCompileOnly ("curse.maven:rats-323596:4802123")
    modCompileOnly("curse.maven:skinned-lanterns-414154:4656953")
    modCompileOnly("curse.maven:spelunkery-790530:5043883")
    modCompileOnly("curse.maven:scholar-961802:5214379")
    modCompileOnly("curse.maven:map-atlases-forge-519759:5307805")
    modImplementation("curse.maven:soul-fire-d-662413:5448803")
    modImplementation("curse.maven:cobweb-968456:5441209")
	//testing thin air compatibility
    modCompileOnly("curse.maven:puzzles-lib-495476:5330447")
    modCompileOnly("curse.maven:new-thin-air-878379:5068247")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_version}")


    modCompileOnly ("maven.modrinth:dye-depot:1.0.0-forge")

    modCompileOnly("curse.maven:alexs-caves-924854:4806837")
    modCompileOnly("curse.maven:citadel-331936:4786380")


    implementation 'org.jetbrains:annotations:22.0.0'
}
